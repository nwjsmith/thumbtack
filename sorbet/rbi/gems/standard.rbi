# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/standard/all/standard.rbi
#
# standard-1.0.4

module RuboCop
end
class RuboCop::Cop::Lint::AssignmentInCondition < RuboCop::Cop::Base
end
class RuboCop::CommentConfig
end
module Standard
end
class Standard::FileFinder
  def call(name, search_path); end
end
class Standard::ParsesCliOption
  def argv_value_for(argv, option_name); end
  def call(argv, option_name); end
end
class Standard::LoadsYamlConfig
  def arrayify(object); end
  def call(standard_yaml_path, todo_yaml_path); end
  def construct_config(yaml_path, standard_yaml, todo_path, todo_yaml); end
  def expand_ignore_config(ignore_config); end
  def load_standard_yaml(yaml_path); end
end
class Standard::MergesSettings
  def call(argv, standard_yaml); end
  def determine_command(argv); end
  def merge(standard_yaml, standard_cli_flags, rubocop_cli_flags); end
  def parse_standard_argv(argv); end
  def separate_argv(argv); end
  def without_banned(rubocop_cli_flags); end
end
class Standard::MergesSettings::Settings < Struct
  def options; end
  def options=(_); end
  def paths; end
  def paths=(_); end
  def runner; end
  def runner=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Standard::CreatesConfigStore
  def call(standard_config); end
  def initialize; end
end
class Standard::CreatesConfigStore::AssignsRubocopYaml
  def call(config_store, standard_config); end
  def rubocop_yaml_path(desired_version); end
end
class Standard::CreatesConfigStore::SetsTargetRubyVersion
  def call(options_config, standard_config); end
  def floatify_version(version); end
  def max_rubocop_supported_version(desired_version); end
end
class Standard::CreatesConfigStore::ConfiguresIgnoredPaths
  def absolute?(path); end
  def absolutify(config_root, path); end
  def call(options_config, standard_config); end
  def ignored_patterns(standard_config); end
end
class Standard::Config < Struct
  def paths; end
  def paths=(_); end
  def rubocop_config_store; end
  def rubocop_config_store=(_); end
  def rubocop_options; end
  def rubocop_options=(_); end
  def runner; end
  def runner=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Standard::BuildsConfig
  def call(argv, search_path = nil); end
  def determine_yaml_file(argv, search_path, option_name, default_file); end
  def initialize; end
end
class Standard::LoadsRunner
  def call(command); end
end
class Standard::Cli
  def initialize(argv); end
  def run; end
end
class Standard::DetectsFixability
  def call(offenses); end
  def cop_instance(cop_name); end
end
class Standard::Formatter < RuboCop::Formatter::BaseFormatter
  def auto_correct_option_provided?; end
  def file_finished(file, offenses); end
  def initialize(*args); end
  def path_to(file); end
  def print_fix_suggestion_once(offenses); end
  def print_header_once; end
  def print_todo_warning; end
  def self.fixable_error_message(command); end
  def should_suggest_fix?(offenses); end
  def started(_target_files); end
end
module RuboCop::Cop
end
module RuboCop::Cop::Standard
end
class RuboCop::Cop::Standard::BlockSingleLineBraces < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def correction_would_break_code?(node); end
  def get_blocks(node, &block); end
  def message(node); end
  def on_block(node); end
  def on_send(node); end
  def proper_block_style?(node); end
  def replace_do_end_with_braces(corrector, loc); end
  def whitespace_after?(range, length = nil); end
  extend RuboCop::Cop::AutoCorrector
end
